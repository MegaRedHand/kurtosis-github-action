name: 'Kurtosis GitHub Action'
description: 'Allows you to spin up Kurtosis tests & preview environments'
branding:
  icon: 'box'
  color: 'green'
inputs:
  path:
    description: 'Path of the Kurtosis Package (directory, url)'
    required: true
  args-file:
    description: 'Path to the arguments file'
    required: false
    default: ''
  cloud_api_key:
    description: 'The API key for your Cloud Kurtosis Account; if empty we spin up locally'
    required: false
    default: ''
  cloud_instance_id:
    description: 'The instance id for the cloud Kurtosis box'
    required: false
    default: ''
  version:
    description: 'Specific version of Kurtosis to install'
    required: false
    default: 'latest'
  
runs:
  using: 'composite'
  steps:
      - name: Setup Kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          if [ "${{ inputs.version }}" = "latest" ]; then
            sudo apt install kurtosis-cli
          else
            sudo apt install kurtosis-cli=${{ inputs.kurtosis_version }}
          fi
          kurtosis analytics disable
          echo "$(dirname $(which kurtosis))" >> $GITHUB_PATH
        shell: bash
      - name: Configure Kurtosis Cloud
        if: inputs.cloud_instance_id != '' && inputs.cloud_api_key != ''
        run: |
          n=0
          until [ "$n" -ge 3 ]
          do
            kurtosis cloud load ${CLOUD_INSTANCE_ID} && break
            n=$((n+1))
            echo "Retry $n/3..."
            sleep 5
          done
          kurtosis engine restart
        env:
          KURTOSIS_CLOUD_API_KEY: ${{ inputs.cloud_api_key }}
          CLOUD_INSTANCE_ID: ${{ inputs.cloud_instance_id }}
        shell: bash
      - name: Run the Kurtosis package
        run: |
          TRIMMED_PATH="${PATH//\/usr\/bin:/}"
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          ENCLAVE_NAME="${BRANCH_NAME//\//-}"
          kurtosis enclave rm ${ENCLAVE_NAME} -f 2>/dev/null || echo "Couldn't delete perhaps first run"
          if [ -n "${ARGS_FILE}" ]; then
            kurtosis run $GITHUB_WORKSPACE/${TRIMMED_PATH} --args-file ${ARGS_FILE} --enclave ${ENCLAVE_NAME} | tee kurtosis_output.txt
          else
            kurtosis run $GITHUB_WORKSPACE/${TRIMMED_PATH} --enclave ${ENCLAVE_NAME} | tee kurtosis_output.txt
          fi
        shell: bash
        env:
          ARGS_FILE: ${{ inputs.args-file }}
          PATH: ${{ inputs.path }}
      - name: Generate Service Links
        if: inputs.cloud_instance_id != '' && inputs.cloud_api_key != ''
        run: |
          KURTOSIS_OUTPUT="$(cat kurtosis_output.txt)"

          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          ENCLAVE_NAME="${BRANCH_NAME//\//-}"

          # Extract Enclave UUID
          ENCLAVE_UUID=$(echo "$KURTOSIS_OUTPUT" | grep 'UUID:' | head -n 1 | awk '{print $2}')

          # Extract Service UUIDs for services with an HTTP port
          SERVICE_UUIDS=$(echo "$KURTOSIS_OUTPUT" | grep 'http:' | awk '{print $1}')

          # Extract the first 12 characters of the cloud instance ID
          INSTANCE_ID_PREFIX=$(echo "${{ inputs.cloud_instance_id }}" | cut -c 1-12)

          # Command to get the current output of `kurtosis context ls`
          KURTOSIS_OUTPUT=$(kurtosis context ls)

          # Parse the output, find the matching INSTANCE_ID_PREFIX, and transform the IP address
          echo "$KURTOSIS_OUTPUT" | awk -v uuid="$INSTANCE_ID_PREFIX" '
          $1 == uuid {
              gsub(/\./, "-", $3)
              echo "Enclave: $ENCLAVE_NAME started on https://cloud.kurtosis.com/gateway/ips/$3/ports/9711/enclave/$ENCLAVE_UUID/overview" > comment_output.txt
              exit
          }
          '


          # For each service, generate the link
          echo "$SERVICE_UUIDS" | while read -r SERVICE_UUID; do
            # Check if SERVICE_UUID matches the pattern [a-f0-9]{12}
            if [[ "$SERVICE_UUID" =~ ^[a-f0-9]{12}$ ]]; then
              PORT_NUMBER=$(echo "$KURTOSIS_OUTPUT" | grep "$SERVICE_UUID" | grep 'http:' | awk '{print $4}' | cut -d':' -f2 | cut -d'/' -f1)
              
              # Construct the URL
              URL="https://${PORT_NUMBER}-${SERVICE_UUID}-${ENCLAVE_UUID}-${INSTANCE_ID_PREFIX}.cloud.kurtosis.com/"
              echo "Service URL: $URL" >> comment_output.txt
            fi
          done
          echo "Service URLs if any might have to be copied and pasted if you are getting 401s!" >> comment_output.txt
        shell: bash
        env:
          CLOUD_INSTANCE_ID: ${{ inputs.cloud_instance_id }}
      - name: Read Comment Body
        if: inputs.cloud_instance_id != '' && inputs.cloud_api_key != ''
        id: read_comment_body
        run: |
          COMMENT_BODY=$(cat comment_output.txt)
          COMMENT_BODY="${COMMENT_BODY//'%'/'%25'}"  # Escape %
          COMMENT_BODY="${COMMENT_BODY//$'\n'/'%0A'}"  # Replace newline characters with %0A
          COMMENT_BODY="${COMMENT_BODY//$'\r'/'%0D'}"  # Replace carriage return characters with %0D
          echo "::set-output name=comment_body::${COMMENT_BODY}"
        shell: bash
      - name: Find Comment
        if: github.event_name == 'pull_request' && inputs.cloud_instance_id != '' && inputs.cloud_api_key != ''
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: <!-- KURTOSIS_GENERATED_COMMENT -->       
      - name: Create comment with output
        if: github.event_name == 'pull_request' && inputs.cloud_instance_id != '' && inputs.cloud_api_key != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          comment-id: ${{ steps.fc.outputs.comment-id }}          
          body: |
            <!-- KURTOSIS_GENERATED_COMMENT -->
            ${{ steps.read_comment_body.outputs.comment_body }}
